#!/bin/bash
set -eo pipefail
##
# This script is used to setup the bastion host for the sandbox...
##

# Allow instruqt time to inject variables and settings
until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ] ; do
    echo "Waiting for instruqt bootstrap to complete"
    sleep 1
done

# let's get all the certs and keys in one place
# controller
scp -o StrictHostKeyChecking=no -q root@aap-controller:/opt/ansible/certs/aap-controller.crt /opt/ansible/certs/aap-controller.crt
scp -o StrictHostKeyChecking=no -q root@aap-controller:/opt/ansible/certs/aap-controller.key /opt/ansible/certs/aap-controller.key

# hub
scp -o StrictHostKeyChecking=no -q root@aap-hub:/opt/ansible/certs/aap-hub.crt /opt/ansible/certs/aap-hub.crt
scp -o StrictHostKeyChecking=no -q root@aap-hub:/opt/ansible/certs/aap-hub.key /opt/ansible/certs/aap-hub.key

# eda
scp -o StrictHostKeyChecking=no -q root@eda-controller:/opt/ansible/certs/eda-controller.crt /opt/ansible/certs/eda-controller.crt
scp -o StrictHostKeyChecking=no -q root@eda-controller:/opt/ansible/certs/eda-controller.key /opt/ansible/certs/eda-controller.key


# bootstrap the inventory file
pushd /opt/ansible/instruqt-inventory

cat <<'EOF' > inventory
[automationcontroller]
aap-controller routable_hostname="aap-controller.{{ domain_suffix }}"

[automationhub]
aap-hub routable_hostname="aap-hub.{{ domain_suffix }}"

[automationedacontroller]
eda-controller routable_hostname="eda-controller.{{ domain_suffix }}"

[database]
postgres

[all:vars]
enable_insights_collection=false
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
admin_password='{{ common_password }}'

bundle_install=true
bundle_dir=/opt/ansible/bundle

pg_host='postgres'
pg_port='5432'
pg_database='awx'
pg_username='awx'
pg_password='{{ common_password }}'
pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

registry_url='registry.redhat.io'

# Automation hub configuration

automationhub_admin_password='{{ common_password }}'

automationhub_pg_host='postgres'
automationhub_pg_port=5432

automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password='{{ common_password }}'
automationhub_pg_sslmode='prefer'
automationhub_seed_collections=false

# Automation Event-Driven Ansible controller configuration

automationedacontroller_admin_password='{{ common_password }}'

automationedacontroller_pg_host='postgres'
automationedacontroller_pg_port=5432

automationedacontroller_pg_database='automationedacontroller'
automationedacontroller_pg_username='automationedacontroller'
automationedacontroller_pg_password='{{ common_password }}'

# Keystore file to install in SSO node
# sso_custom_keystore_file='/path/to/sso.jks'

# This install will deploy SSO with sso_use_https=True
# Keystore password is required for https enabled SSO
# sso_keystore_password=''

# This install will deploy a TLS enabled Automation Hub.
# If for some reason this is not the behavior wanted one can
# disable TLS enabled deployment.
#
# automationhub_disable_https = False
# The default install will generate self-signed certificates for the Automation
# Hub service. If you are providing valid certificate via automationhub_ssl_cert
# and automationhub_ssl_key, one should toggle that value to True.
#
# automationhub_ssl_validate_certs = False
# SSL-related variables
# If set, this will install a custom CA certificate to the system trust store.
# custom_ca_cert=/path/to/ca.crt
# Certificate and key to install in Automation Hub node
automationhub_ssl_cert=/opt/ansible/certs/aap-hub.crt
automationhub_ssl_key=/opt/ansible/certs/aap-hub.key

# Certificate and key to install in nginx for the web UI and API
web_server_ssl_cert=/opt/ansible/certs/aap-controller.crt
web_server_ssl_key=/opt/ansible/certs/aap-controller.key
# Server-side SSL settings for PostgreSQL (when we are installing it).
postgres_use_ssl=False
# postgres_ssl_cert=/path/to/pgsql.crt
# postgres_ssl_key=/path/to/pgsql.key

# Boolean flag used to verify Automation Controller's
# web certificates when making calls from Automation Event-Driven Ansible controller.
# automationedacontroller_controller_verify_ssl = true
#
# Certificate and key to install in Automation Event-Driven Ansible controller node
automationedacontroller_ssl_cert=/opt/ansible/certs/eda-controller.crt
automationedacontroller_ssl_key=/opt/ansible/certs/eda-controller.key
EOF

popd

pushd /opt/ansible

ansible-playbook setup.yml -e offline_token=$RHN_OFFLINE_TOKEN -e provided_sha_value=$RHN_AAP_PACKAGE_CHECKSUM

tar -xf aap.tar.gz -C . --strip-components=1

cp inventory instruqt-inventory/inventory.default
cp instruqt-inventory/inventory inventory

time ./setup.sh -i inventory -e domain_suffix=$_SANDBOX_ID.instruqt.io -e common_password=$_SANDBOX_ID

# preload subscription manifest
echo "{\"manifest\": \"$(base64 -w 0 manifest/manifest.zip)\"}" > manifest/manifest_payload.json
curl -vk -u admin:$_SANDBOX_ID -H 'Content-Type:application/json' -X POST -d @manifest/manifest_payload.json https://aap-controller.${_SANDBOX_ID}.instruqt.io/api/v2/config/