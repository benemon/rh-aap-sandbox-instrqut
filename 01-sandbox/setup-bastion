#!/bin/bash
set -eo pipefail
##
# This script is used to setup the bastion host for the sandbox...
##

# Allow instruqt time to inject variables and settings
until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ] ; do
    echo "Waiting for instruqt bootstrap to complete"
    sleep 1
done

# let's get all the certs and keys in one place
# controller
scp -o StrictHostKeyChecking=no -q root@controller:/opt/ansible/certs/controller.crt /opt/ansible/certs/controller.crt
scp -o StrictHostKeyChecking=no -q root@controller:/opt/ansible/certs/controller.key /opt/ansible/certs/controller.key

# hub
scp -o StrictHostKeyChecking=no -q root@hub:/opt/ansible/certs/hub.crt /opt/ansible/certs/hub.crt
scp -o StrictHostKeyChecking=no -q root@hub:/opt/ansible/certs/hub.key /opt/ansible/certs/hub.key

# eda
scp -o StrictHostKeyChecking=no -q root@eda:/opt/ansible/certs/eda.crt /opt/ansible/certs/eda.crt
scp -o StrictHostKeyChecking=no -q root@eda:/opt/ansible/certs/eda.key /opt/ansible/certs/eda.key

# gateway
scp -o StrictHostKeyChecking=no -q root@gateway:/opt/ansible/certs/gateway.crt /opt/ansible/certs/gateway.crt
scp -o StrictHostKeyChecking=no -q root@gateway:/opt/ansible/certs/gateway.key /opt/ansible/certs/gateway.key

# bootstrap the inventory file
pushd /opt/ansible/instruqt-inventory

cat <<'EOF' > inventory
[automationcontroller]
controller routable_hostname="controller.{{ domain_suffix }}"

[automationhub]
hub routable_hostname="hub.{{ domain_suffix }}"

[automationedacontroller]
eda routable_hostname="eda.{{ domain_suffix }}"

[automationgateway]
gateway routable_hostname="gateway.{{ domain_suffix }}"

[database]
postgres

[all:vars]
enable_insights_collection=false

ansible_ssh_common_args='-o StrictHostKeyChecking=no'

admin_password='{{ common_password }}'

bundle_install=true
bundle_dir=/opt/ansible/bundle

pg_host='postgres'
pg_port='5432'
pg_database='awx'
pg_username='awx'
pg_password='{{ common_password }}'
pg_sslmode='prefer'  # set to 'verify-full' for client-side enforced SSL

registry_url='registry.redhat.io'

# Automation hub configuration

automationhub_admin_password='{{ common_password }}'

automationhub_pg_host='postgres'
automationhub_pg_port=5432

automationhub_pg_database='automationhub'
automationhub_pg_username='automationhub'
automationhub_pg_password='{{ common_password }}'
automationhub_pg_sslmode='prefer'
automationhub_seed_collections=false

# Automation Event-Driven Ansible controller configuration

automationedacontroller_admin_password='{{ common_password }}'

automationedacontroller_pg_host='postgres'
automationedacontroller_pg_port=5432

automationedacontroller_pg_database='automationedacontroller'
automationedacontroller_pg_username='automationedacontroller'
automationedacontroller_pg_password='{{ common_password }}'

# Keystore file to install in SSO node
# sso_custom_keystore_file='/path/to/sso.jks'

# This install will deploy SSO with sso_use_https=True
# Keystore password is required for https enabled SSO
sso_keystore_password='{{ common_password }}'

# This install will deploy a TLS enabled Automation Hub.
# If for some reason this is not the behavior wanted one can
# disable TLS enabled deployment.
#
# automationhub_disable_https = False
# The default install will generate self-signed certificates for the Automation
# Hub service. If you are providing valid certificate via automationhub_ssl_cert
# and automationhub_ssl_key, one should toggle that value to True.
#
# automationhub_ssl_validate_certs = False
# SSL-related variables
# If set, this will install a custom CA certificate to the system trust store.
# custom_ca_cert=/path/to/ca.crt
# Certificate and key to install in Automation Hub node
automationhub_ssl_cert=/opt/ansible/certs/hub.crt
automationhub_ssl_key=/opt/ansible/certs/hub.key

# Automation Gateway configuration
automationgateway_admin_email="admin@gateway.{{ domain_suffix }}"
automationgateway_admin_password='{{ common_password }}'

automationgateway_pg_host='postgres'
automationgateway_pg_port=5432

automationgateway_pg_database='automationgateway'
automationgateway_pg_username='automationgateway'
automationgateway_pg_password='{{ common_password }}'
automationgateway_pg_sslmode='prefer'

# The main automation gateway URL that clients will connect to (e.g. https://<load balancer host>).
# If not specified, the first node in the [automationgateway] group will be used when needed.
# automationgateway_main_url = ''

# Certificate and key to install in Automation Gateway
automationgateway_ssl_cert=/opt/ansible/certs/gateway.crt
automationgateway_ssl_key=/opt/ansible/certs/gateway.key

# Certificate and key to install in nginx for the web UI and API
web_server_ssl_cert=/opt/ansible/certs/controller.crt
web_server_ssl_key=/opt/ansible/certs/controller.key
# Server-side SSL settings for PostgreSQL (when we are installing it).
postgres_use_ssl=False
# postgres_ssl_cert=/path/to/pgsql.crt
# postgres_ssl_key=/path/to/pgsql.key

# Boolean flag used to verify Automation Controller's
# web certificates when making calls from Automation Event-Driven Ansible controller.
# automationedacontroller_controller_verify_ssl = true
#
# Certificate and key to install in Automation Event-Driven Ansible controller node
automationedacontroller_ssl_cert=/opt/ansible/certs/eda.crt
automationedacontroller_ssl_key=/opt/ansible/certs/eda.key
EOF

popd

pushd /opt/ansible

tar -xf aap.tar.gz -C . --strip-components=1

cp inventory instruqt-inventory/inventory.default
cp instruqt-inventory/inventory inventory

if [ "$AAP_RUN_INSTALLER" = "true" ] || [ "$AAP_RUN_INSTALLER" = "1" ]; then
    echo "starting installation..."
    time ./setup.sh -i inventory -e domain_suffix=$_SANDBOX_ID.instruqt.io -e common_password=$_SANDBOX_ID > /dev/null
    echo "{\"manifest\": \"$(base64 -w 0 manifest/manifest.zip)\"}" > manifest/manifest_payload.json
    curl -vk -u admin:$_SANDBOX_ID -H 'Content-Type:application/json' -X POST -d @manifest/manifest_payload.json https://controller.${_SANDBOX_ID}.instruqt.io/api/v2/config/
    echo "...installation complete"
else
    echo "AAP_RUN_INSTALLER is not set to true, skipping installation"
fi